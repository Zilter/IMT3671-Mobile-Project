package com.project.gemswapper;

import java.util.Random;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.view.View;

public class GameView extends View {

	private final int GRIDSIZE = 8;
	
	Paint paint;
	Resources res;
	Bitmap grid;
	Context mContext;
	Tile tiles[][];
	Random randomGen;
	
	public GameView(Context context) {
		super(context);
		paint = new Paint();
		tiles = new Tile[8][8];
		
		mContext = context;
		res = this.getResources();
		grid = BitmapFactory.decodeResource(res,  R.drawable.grid_01);
		randomGen = new Random();
		
		fillGrid();
	}
	
	private void fillGrid()
	{
		int typeTemp;
		boolean goodType = true;
		
		for(int y = 0; y < GRIDSIZE; ++y)
		{
			for(int x = 0; x < GRIDSIZE; ++x)
			{
				
				do
				{
					goodType = true;
					typeTemp = randomGen.nextInt(5);
					
//					if(x >= 2)
//					{
//						if(tiles[x - 1][y].getType() == typeTemp && tiles[x - 2][y].getType() == typeTemp)
//						{
//							goodType = false;
//						}
//					}
//					
//					if(y >= 2)
//					{
//						if(tiles[x][y - 1].getType() == typeTemp && tiles[x][y - 2].getType() == typeTemp)
//						{
//							goodType = false;
//						}
//					}
					
				}while(!goodType);
				
				tiles[y][x] = new Tile(mContext, x * 90, y * 90, typeTemp);
			}
		}
	}
	
	
	
	
	private boolean checkMatch(int x, int y, int type)
	{
		if(x >= 2)	// Check to the left for 3 in a row. 
		{
			if(tiles[x - 1][y].getType() == type && tiles[x - 2][y].getType() == type)
			{
				return true;
			}
		}
		
		if(x <= GRIDSIZE - 3) // Check to the right for 3 in a row.
		{
			if(tiles[x + 1][y].getType() == type && tiles[x + 2][y].getType() == type)
			{
				return true;
			}
		}
		
//		if(x > 0 && x < GRIDSIZE - 1) // Check both left and right.
//		{
//			if(tiles[x - 1][y].getType() == type && tiles[x + 1][y].getType() == type)
//			{
//				return true;
//			}
//		}
		
		if(y >= 2) // Check above.
		{
			if(tiles[x][y - 1].getType() == type && tiles[x][y - 2].getType() == type)
			{
				return true;
			}
		}
		
		if(y <= GRIDSIZE - 3)	// Check below.
		{
			if(tiles[x][y + 1].getType() == type && tiles[x][y + 2].getType() == type)
			{
				return true;
			}
		}
		
//		if(y > 0 && y < GRIDSIZE - 1) // Check both above and below. 
//		{
//			if(tiles[x][y - 1].getType() == type && tiles[x][y + 1].getType() == type)
//			{
//				return true;
//			}
//		}
		
		return false;
	}


	@Override
	protected void onDraw(Canvas canvas)
	{
		// Fill screen white
		paint.setStyle(Paint.Style.FILL);
		paint.setColor(Color.WHITE);
		canvas.drawPaint(paint);
		
		canvas.drawBitmap(grid, 0, 0, paint);
		
		for(int i = 0; i < GRIDSIZE; ++i)
		{
			for(int j = 0; j < GRIDSIZE; ++j)
			{
				tiles[i][j].draw(canvas);
			}
		}
	}
}
